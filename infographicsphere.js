// Generated by CoffeeScript 1.8.0
(function() {
  $.widget('custom.infographicSphere', {
    options: {
      velocity: [.01, .01],
      strokeStyle: 'red',
      lineWidth: 0.5,
      backsideVisible: true,
      subdivision: 5,
      scaleHeight: 0.33,
      height: window.innerHeight,
      width: window.innerWidth
    },
    _create: function() {
      var elId;
      this.timeZero = Date.now();
      elId = this.element.attr('id');
      this.projection = d3.geo.orthographic().scale(this.options.height * this.options.scaleHeight);
      this.canvas = d3.select("#" + elId).append('canvas');
      this.context = this.canvas.node().getContext('2d');
      this.setOptions();
      return d3.timer(this.timerFunc());
    },
    _init: function() {},
    timerFunc: function() {
      var time;
      time = Date.now() - this.timeZero;
      this.projection.rotate([time * this.options.velocity[0], time * this.options.velocity[1]]);
      return this.geodesic(this.context, this.options.subdivision, this.projection);
    },
    setOptions: function() {
      this.canvas.attr('width', this.options.width).attr('height', this.options.height);
      this.context.strokeStyle = this.options.strokeStyle;
      return this.context.lineWidth = this.options.lineWidth;
    },
    geodesic: function(surface, subdivision, size) {
      this.faces = d3.geodesic.polygons(subdivision).map(function(d) {
        d = d.coordinates[0];
        d.pop;
        d.fill = d3.hsl(d[0][0], 1, .5);
        d.polygon = d3.geom.polygon(d.map(size));
        return d;
      });
      return this.redraw(surface, size);
    },
    redraw: function(surface, size) {
      surface.clearRect(0, 0, this.width, this.height);
      this.faces.forEach((function(_this) {
        return function(d) {
          d.polygon[0] = size(d[0]);
          d.polygon[1] = size(d[1]);
          d.polygon[2] = size(d[2]);
          if (d.visible = d.polygon.area() > 0) {
            surface.beginPath();
            return _this.drawTriangle(surface, d.polygon);
          }
        };
      })(this));
      surface.beginPath();
      this.faces.forEach((function(_this) {
        return function(d) {
          return _this.drawTriangle(surface, d.polygon);
        };
      })(this));
      return surface.stroke();
    },
    drawTriangle: function(surface, triangle) {
      surface.moveTo(triangle[0][0], triangle[0][1]);
      surface.lineTo(triangle[1][0], triangle[1][1]);
      surface.lineTo(triangle[2][0], triangle[2][1]);
      return surface.closePath();
    }
  });

}).call(this);
